apply plugin: 'com.android.application'
apply plugin: 'com.xuexiang.xaop'
apply from: "../config.gradle"

android {

    defaultConfig {
        applicationId "com.chenyang.cyandroidxproject"
        // 混淆配置
        proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-app.pro'
    }

    // APK 签名的那些事：https://www.jianshu.com/p/a1f8e5896aa2
    signingConfigs {
        config {
            storeFile file(StoreFile)
            storePassword StorePassword
            keyAlias KeyAlias
            keyPassword KeyPassword
        }
    }

    buildTypes {

        debug {
            debuggable true
            jniDebuggable true
            // 移除无用的资源文件
            shrinkResources false
            // ZipAlign 优化
            zipAlignEnabled false
            // 设置混淆
            minifyEnabled false
            // 开发环境下的 BuglyId
            buildConfigField "String", "BUGLY_ID", "\"请自行替换 Bugly 上面的 AppID\""
            signingConfig signingConfigs.config
        }

        release {
            debuggable false
            jniDebuggable false
            // 移除无用的资源文件
            shrinkResources true
            // ZipAlign 优化
            zipAlignEnabled true
            // 设置混淆
            minifyEnabled true
            // 正式环境下的 BuglyId
            buildConfigField "String", "BUGLY_ID", "\"请自行替换 Bugly 上面的 AppID\""
            signingConfig signingConfigs.config
        }
    }

    // 默认渠道名
    flavorDimensions "default"
    // 友盟多渠道打包
    android.productFlavors {
        tencent {}  // 应用宝
        baidu {}    // 百度
        xiaomi {}   // 小米
        huawei {}   // 华为

        productFlavors.all { flavor ->
            flavor.manifestPlaceholders = [channel: name]
        }
    }

    // 执行配置
    applicationVariants.all { variant ->

        // Apk 输出配置
        variant.outputs.all { output ->
            outputFileName = rootProject.getName() + '_v' + variant.versionName + '_' + variant.buildType.name
            if (variant.buildType.name == buildTypes.release.getName()) {
                outputFileName += '_' + new Date().format("yyyyMMdd")
            }
            outputFileName += '.apk'
        }
    }

}

dependencies {
    // 基础库（不包任何第三方框架）
    implementation project(':base')
    // 自定义 View
    implementation project(':widget')
    // 标题栏框架：https://github.com/getActivity/TitleBar
    implementation 'com.hjq:titlebar:6.0'
    // 吐司框架：https://github.com/getActivity/ToastUtils
    implementation 'com.hjq:toast:8.0'
    // 状态栏沉浸：https://github.com/gyf-dev/ImmersionBar
    implementation 'com.gyf.immersionbar:immersionbar:3.0.0'
    // ButterKnife 注解库：https://github.com/JakeWharton/butterknife
    if (project.hasProperty('android.injected.invoked.from.ide')) {
        // 开发时使用运行时注解，提升 IDE 编译速度
        implementation 'com.jakewharton:butterknife-reflect:10.2.0'
    } else {
        // 打包时使用编译时注解，提升 APP 运行速度
        implementation 'com.jakewharton:butterknife:10.2.0'
        annotationProcessor 'com.jakewharton:butterknife-compiler:10.2.0'
    }
    // Bugly 异常捕捉：https://bugly.qq.com/docs/user-guide/instruction-manual-android/?v=20190418140644
    implementation 'com.tencent.bugly:crashreport:3.1.0'
    implementation 'com.tencent.bugly:nativecrashreport:3.7.1'

    // 本地异常捕捉框架：https://github.com/Ereza/CustomActivityOnCrash
    implementation 'cat.ereza:customactivityoncrash:2.2.0'
    // 上拉刷新下拉加载：https://github.com/scwang90/SmartRefreshLayout
    implementation 'com.scwang.smartrefresh:SmartRefreshLayout:1.1.0'
    // SmartRefreshLayout 刷新样式集合库
    implementation 'com.scwang.smartrefresh:SmartRefreshHeader:1.1.0'

    // 侧滑框架：https://github.com/luckybilly/SmartSwipe
    implementation 'com.billy.android:smart-swipe:1.1.2'
    implementation 'com.billy.android:smart-swipe-x:1.1.0'
    // AOP 插件库：https://mvnrepository.com/artifact/org.aspectj/aspectjrt
    implementation 'org.aspectj:aspectjrt:1.9.5'
    //LoadSir是一个高效易用，低碳环保，扩展性良好的加载反馈页管理框架，在加载网络或其他数据时候，根据需求切换状态页面，
    // 可添加自定义状态页面，如加载中，加载失败，无数据，网络超时，如占位图，登录失效等常用页面。
    implementation 'com.kingja.loadsir:loadsir:1.3.8'
}
